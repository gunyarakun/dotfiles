set nocompatible
filetype off

if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
  call neobundle#rc()
endif

" NeoBundle
NeoBundle 'Shougo/neobundle.vim'

" EditorConfig
NeoBundle 'editorconfig-vim'
" Auto close
NeoBundle 'AutoClose'
" relative move with "'k"
NeoBundle 'Lokaltog/vim-easymotion'
" show & delete trailing space
NeoBundle 'csexton/trailertrash.vim'
" autocmd myautocmd VimEnter,WinEnter * match Error /\s\+$/
" git
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'gregsexton/gitv'
" rails
NeoBundle 'tpope/vim-rails'
" perl
NeoBundle 'petdance/vim-perl'
" javascript
NeoBundle 'pangloss/vim-javascript'
" scala
NeoBundle 'derekwyatt/vim-scala'
" php
NeoBundle 'shawncplus/php.vim'
" Go
set rtp+=$GOROOT/libexec/libexec/misc/vim
" exe "set rtp+=" . globpath($GOPATH, "src/github.com/golang/lint/misc/vim")
" TypeScript
NeoBundle 'leafgarland/typescript-vim.git'
NeoBundle 'clausreinke/typescript-tools.git'

NeoBundle 'Blackrush/vim-gocode'
" autocmd BufWritePre *.go Fmt

" highlight matchit
NeoBundle "vimtaku/hl_matchit.vim"

" quick run with <Leader>r
NeoBundle 'thinca/vim-quickrun'
" show errormarker
NeoBundle 'errormarker.vim'
" toggle comment with ',,'
NeoBundle 'scrooloose/nerdcommenter'
" show vimshell as window
NeoBundle 'Shougo/vimshell'
" edit surrounded texts
NeoBundle 'surround.vim'
" lightline
NeoBundle 'itchyny/lightline.vim'

" comment out with '\\'
NeoBundle 'tpope/vim-commentary'
" handle lines with same indent spaces as text object with 'ai'/'ii'
NeoBundle 'kana/vim-textobj-user'
NeoBundle 'kana/vim-textobj-indent'

" after Bundle
filetype plugin indent on
syntax enable

" color
set t_Co=256
colorscheme gunya

" encoding
set enc=utf-8
set fenc=utf-8
set fencs=utf-8,euc-jp,cp932
set fileformats=unix,dos

" tab
set expandtab
set smartindent
set tabstop=2
set softtabstop=2
set shiftwidth=2
set smarttab

" scroll
set scroll=11

" find
set hlsearch
set ignorecase
set smartcase
set incsearch
set wrapscan

" status line
set laststatus=2

" show
set showcmd
set showmode
set showmatch
set matchtime=2

" misc
set ambiwidth=double
set number
set ruler
set ttyfast
set list
set listchars=tab:▸\ ,eol:¬
set wildmode=list:longest,full
set display=lastline

" map
nnoremap Y y$

" backup
set nobackup
set swapfile

" bell
set visualbell

" modeline
set modeline
set modelines=5

" lightline
" NOTE: Requires patched font.
"       https://github.com/Lokaltog/vim-powerline/tree/develop/fontpatcher
let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
        \ },
        \ 'component_function': {
        \   'modified': 'MyModified',
        \   'readonly': 'MyReadonly',
        \   'fugitive': 'MyFugitive',
        \   'filename': 'MyFilename',
        \   'fileformat': 'MyFileformat',
        \   'filetype': 'MyFiletype',
        \   'fileencoding': 'MyFileencoding',
        \   'mode': 'MyMode'
        \ }
        \ }

function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      return fugitive#head()
    endif
  catch
  endtry
  return ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction
" lightline END

" For Mac scroll
nnoremap <PageDown> <C-F>
nnoremap <PageUp> <C-B>

" matchit/hi_matchit
source $VIMRUNTIME/macros/matchit.vim
let g:hl_matchit_enable_on_vim_startup = 1
let g:hl_matchit_hl_groupname = 'Search'
"let g:hl_matchit_allow_ft = 'html\|vim\|ruby\|sh'
